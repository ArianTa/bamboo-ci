# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  IMAGE_NAME: server
  COLON_TAG: "1.0.0"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
     
      # Build and push image
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/server:1.0.0
            ${{ secrets.DOCKERHUB_USERNAME }}/server:latest
      
      # Logout from docker hub
      - name: Logout from DockerHub
        id: docker_logout
        run: docker logout

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Pulling the image
      - name: Pulling image
        run: |
          export IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$COLON_TAG
          echo $IMAGE_ID
          docker-compose -f docker-compose-integration-test.yml pull
      
      # Running unit tests
      - name: Unit test
        run: docker run --rm $IMAGE_ID python -m pytest

      # Running integration tests and cleaning up
      - name: Integration test
        run: | 
          docker-compose -f docker-compose-integration-test.yml up
          docker-compose down -v

      # Logout from docker hub
      - name: Logout from DockerHub
        id: docker_logout
        run: docker logout
